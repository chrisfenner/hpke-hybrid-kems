package hybrid

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func mustDecodeHex(t *testing.T, h string) []byte {
	bytes, err := hex.DecodeString(h)
	if err != nil {
		t.Fatalf("DecodeString() = %v", err)
	}
	return bytes
}

// These are all new known-answer test vectors for the RFC.
func TestEncapDecapKnownAnswer(t *testing.T) {
	for _, tc := range []struct {
		name string
		ikm  []byte
		ek   []byte
		dk   []byte
		m    []byte
		ct   []byte
		k    []byte
	}{
		{
			name: "test vector 1",
			ikm:  mustDecodeHex(t, "3829a3946d3516775e86c8f57498e89d54695f9734a1b825bc1937847268051961beefec04b0bd85a41e3529b543b1ba952d0d88b385ea4238e824c6d09b015031db2b5010876200559dd4307730c63699e92802144f8bb1e26c1dda86d9814128ddd41980148e1ab5154a67c0bddec5"),
			ek:   mustDecodeHex(t, "04a41b08f78897df662520fe9199a7322ed9ead5bc6983ece104db17af7d02bd9569b15c26ca09f311e3e645d912c3ace1fd8ebe9549548319bce5b9a11ca1b1b53b85adfca0c5f73a46e362d6354811276ef4de5ff6498dc07b77400bd8e934b9e9d184b4ccb862dab7718bb0d316485ccc2759835795e5b04cc5562a162e2e79b526f02a29a1c4d41ac890da351b982510c158ccca99e47929d640025366b7824a4fcae0061031c0a5b4327a6a5f28893820e74141d457baf1953e2624b1299ad34c521c67ba45c47abb3b581d7ca8c7121171903144b2af212aa9a530b3cd3cc8faf12c990a1029bb84a6dc9030f1cbdba9ac61619ddeea98b8f9b6a2f33793667d461a41c2a104da62c51e2c120bdc8415c4beb230ac527076a8e8607dc806ae915b0947a019916501b88e85e3683fd574c43c09bd0c47af019367a431f6103c4e61879dd284a2f2738db57fdc02b7887433742019d0e7aa1aacc9bbb391f7e077a03186cbd64a58c0a72d87b209b61a7356cbcc75b8945468f662a1d538bd22ca0a90011a26615495a7955976b036089da560210d851a29d3c83013982034039ef24f5a9ccc57e3187a3b92c4431105c57c479c708f5bbf65bb84e1410a95740326c1abbe3706019a6920b24b75fa4bea8ccd58380ac353ce36669bd7990cb44ac613564cf551c4ba1a1d8beb7081329b9d4c51caa7657e13bb8b4067de08a212a84e15469ed6438b90a886ca8144e4d6092002aed6b7b4de828e22f895765435434196e1305e1328857649718ed92847b17e362957a76904e81059743590914792b8cc65a5102a31e149ba33379af929c963263be3354eeb7f257a3752254093f1951ec281f2998a10d72b0bc348e06a07230a6da3e95cbbe5022c1c9943a38103b09294a02fb36cbed4fa2d726782d62430150902be4a8867439492a6b98b171c81c832c4ea5e6a429e12b20a1a11b50632cf5098294f81c69d24082958b1e444bd9147c2a03caf468189787b3e0b141adae9ac3b973e2183bbd6b16468005f052645aae66fc9f972d816a2cca947bda31dfe09730e08508fab0ebecb0940e37c78d3629d7c830d390547e0814c642c5e5198367a1539687bc46a68053ace818caff72149b5d734ea6217987a315b8b85f7743e35696989231fb7423924103baed04d3d7859ca58cfa2a0cd9c9316a7b037fd827262013998c89b5aac5df4b82b68480e0a70959b86733801895d041c8b3b7b0a14531c568764235db8b98692342c902a6c7ab4159af5b461b5745f7743dec7b34e344361157afd45c7c7833f033a1d94b24cd48c9fa9cb417f721190623e5707492c5345aa5c6f968b6bb22c5e00023df82a5a98a473cd8bcb4479a44a428653e8b3b81b3e9a03ac7334ad67fc60f193a689f71474604718fc27c61c9a233342d19987b10106ab8535ab76938ab045ae34acaf91aa6ad5b8c36c49a746406b3402a5db95e5e4ce03d9186dd6978e80a2a66525cd6286bd8a8ce9d67fe8aab9d0d01f8ae2024559c10de4b90c0467d90bcbcf8a44fae77820da4b19e8ae2a847b1c6b1ee6e46b68d898ce3aa137ca84aa7c458e96a831710d58962c9b19b7f937c7084936fb83517062c58a235e21852ebac722e56abe56e8c591b3679b1b4fb2960513e682b0b74f25869d3b0c8489091f972596eda674d691cefcb4bd93e36d9e6298456638e23816a582073cd8cb0fac1a793009f6233ec51c35e9e9a6416a1bcbb540503223a28528e1649c61f4453997e49c4d9f346856585dec342352bfba96aa8cd9059cf8acb9"),
			dk:   mustDecodeHex(t, "7c4936e2f502424a28b0c23fd13eb4e108931cb5666efcb5f89429867e2d01136d02290ec87240d937d2aa554195fecc2c5711d4b30e672b5705d4752cb3132c7fcf9a3b0559d3f25a28512361fc45e4fc56e1203f5b1d0f20f368475495cc48308745d67a15c64621f2e6144246cc0f"),
			m:    mustDecodeHex(t, "dbcd7fe48d6fbbaa7d4bdfb23c89a7e47e4ccee1e29f796ae3314952a161575196571c1765caa45d770bba6fcc8d18fdea979b393aff37f7f3eae072eae99d7b17d6a04c93d4f838d57fa3a67e33ce2a"),
			ct:   mustDecodeHex(t, "04a55b3cb1dd3cdb19ca70e328f831ff967d0d68f13b780defb574156583d1aff5ee385c789624f4f94ede76adb6909be5beafe241f2ac2f6b8152f05299b4b687dbc7b452253caca952f6106b26c37121f7aa2822e7349a447916e7ed6d7f68989c0897281205aa7bf92e5cd086f7c08829e59246e8c3373580a134aa573d9333621a1d966c907ff4d501876186b49fe50d36ed3c2245b95150b65cc22003ea3aa49b96da911f79fa0c754dc4acc4f4f8054f5e4dba55d12626e9e3f4cfbd04ab6dba5bbf21c557676cf16a6f79b7a8fb4df8ecc1169cb99c81c4670cce4ab84157c664943ca11f66314b73344aa2866d0e811ba4fe80350d98b89d84b89815108130109e2e643bf2ad5ab1e3203ad3804c7a877146c4a2bb777f9b9cf4b6f0ef3c8f96960247157e33e6022254098c2ac617005f37f15f06c77cbd215d6ca6fbf9d95f21ffae9c5bd424a6d5c1b33bf2ac755769aef26c94aaf7141aedbf90680a2f8de2a1d4f3098662e9e13e97f74c1faab7dacf465b7fa95981344127d98eaf5a57b2ba890a67f19cc69879644816a02edb7654731cbe989b0a1170422778840dbaffb01708323df53634eb5f3e12cccf4246c703a3529c850818c1d044c14b5e49cce6725eabe6a153e2fd88e8e0216acf1942dde6095da5f857915d4a548bbf41187a253b9b90f05503d4520ddd835d5bef7671a94cc1b990e2ca6491d50e28243eb8b8d33fabac45bb9134060d2f72ffc6ad1b5e4bd2f5e265c79b37f0fd4b6a28a6c40597c68ee6b8e84c8a0284f7a93f297189f514c1f23fd16a5c7663fa972dec207e91baab627d0598c0f32994008e159ceef98f3fb6dc761826b6534477e77e70552a1f557afad0def2f9343b58ee6f4924c56588f7f1029a3c13279fddf3b250b0026ecacd2ee7c9ba8920de6bdaae834e70da862affc9e204d5fe264a5ace3a1aec1ef747f0025e7433f507f7d8e312a6133b6c1da1e8619b0ed49a8f466375a21f69e2877ae4dd4262b9a7d4c36adf7ba24bd4b7fed18fab15ef400136bafdddcf0c68a4520d68b575fb9facd8cfb1d30d7f53880adfed44e3cb76c8e0b14b471304676b3e2835cdfab3fed01421555165c81da5a105950f839a00a453e63061b2c5a95c3c05e10c1137f4d10993edd35899c281933711bda2530ebae9d5ef6b710a01f0ef464e12534c1c470364f3a8f519cace3a7b00db5477092c1f0605d21852cc8d328787189701cf287658e1fb34ea316416c600278773b1a7f61786b3e9c0091fb7ea74bb9ce9fb39716760ab3ac870f89bd7d73060d984baa188619b1e5fe5572bd9a9a6a7c9cd1f0d52666615dc408bd3122cc1e36077bf9dfe64eb5347e789ab3522c656e5bb5bfba5c50f0271e1b2b13871395e34a23805f25d43a8fa97db1e90c6aafb201d258a63d3d7f959819827036f9965c1694b03f705e952ca0b320ea5d8ef129dc0f92795adb724f0b176a86dc63671a1fc76bd3eaa22dbe8ddc472d5ea06438438dca9f6db3a7a37ad72b1acdd5ccfba311c276a4c2e0390563bcef646b233c6490c0f64ab6b17dae8b2655b22dc3e77252bf7e9c69a464466b752e68121a47cad5bfa6f526231d25ef30fa710dba3e04d1504514c83de87f54097f6409f9077465bac74ce036fca5e7b8883f672f9"),
			k:    mustDecodeHex(t, "e399576b972ec73b8501226547413eee4eaa273ea97170066b080014f099a737619b302b20ab4147cea6ec582d1ed126e3e4e993257ac3b0a3f7c64cf496b2f4"),
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			pub, priv, err := DHKEMP384PlusMLKEM768.DeriveKeyPair(tc.ikm)
			if err != nil {
				t.Fatalf("DeriveKeyPair = %v", err)
			}
			pubBytes, err := pub.MarshalBinary()
			if err != nil {
				t.Fatalf("MarshalBinary = %v", err)
			}
			if !bytes.Equal(pubBytes, tc.ek) {
				t.Errorf("ek =\n%x\nwant\n%x", pubBytes, tc.ek)
			}
			privBytes, err := priv.MarshalBinary()
			if err != nil {
				t.Fatalf("MarshalBinary = %v", err)
			}
			if !bytes.Equal(privBytes, tc.dk) {
				t.Errorf("dk =\n%x\nwant\n%x", privBytes, tc.dk)
			}

			key, ciphertext, err := DHKEMP384PlusMLKEM768.EncapDerand(*pub, tc.m)
			if err != nil {
				t.Fatalf("EncapDerand = %v", err)
			}
			ctBytes, err := ciphertext.MarshalBinary()
			if err != nil {
				t.Fatalf("MarshalBinary = %v", err)
			}
			if !bytes.Equal(ctBytes, tc.ct) {
				t.Errorf("ct =\n%x\nwant\n%x", ctBytes, tc.ct)
			}
			if !bytes.Equal(key, tc.k) {
				t.Errorf("k =\n%x\nwant\n%x", key, tc.k)
			}

			decapsed, err := DHKEMP384PlusMLKEM768.Decap(*priv, *ciphertext)
			if err != nil {
				t.Fatalf("Decap = %v", err)
			}
			if !bytes.Equal(decapsed, tc.k) {
				t.Errorf("k =\n%x\nwant\n%x", decapsed, tc.k)
			}

			t.Logf("Nsecret = %v", len(key))
			t.Logf("Nenc = %v", len(ctBytes))
			t.Logf("Npk = %v", len(pubBytes))
			t.Logf("Nsk = %v", len(privBytes))
		})
	}
}
